spring.application.name=springcloud-zuul
server.port=88

# 集成eureka 可以使用默认规则 API网关地址+访问的服务名称+接口URI的形式访问其它服务
# 比如 消费者服务 http://localhost:88/eureka-client-consumer/app/loginByFeign
# 提供者服务 http://localhost:88/eureka-client-provider/service/login
eureka.client.serviceUrl.defaultZone=http://Admin:1122334@localhost:5000/eureka

#指定具体服务路由 把eureka-client-consumer服务的接口访问配置成consumer-api
#原来是http://localhost:88/eureka-client-consumer/app/loginByFeign
#修改后http://localhost:88/consumer-api/app/loginByFeign 相当于换了一个服务名称 因为有的服务名称可能不适合作为地址栏url
#换一种理解 /consumer-api/** 表示consumer-api开头通配这种形式的地址都转发到eureka-client-consumer服务对应的接口
zuul.routes.eureka-client-consumer.path=/consumer-api/**

#路由前缀 所有访问接口统一加上/rest http://localhost:88/rest/consumer-api/app/loginByFeign
zuul.prefix=/rest

#访问 http://localhost:88/timeless/*转发到http://baidu.com
#timeless自定义的名字
zuul.routes.timeless.path=/timeless/**
zuul.routes.timeless.url=http://baidu.com

#访问 http://localhost:88/rest/api/1转发到本地接口/local对应的
zuul.routes.tml.path=/api/**
zuul.routes.tml.url=forward:/local

#Zuul主要功能就是转发，在转发过程中我们无法保证被转发的服务是可用的，这个时候就需要容错机制及回退机制
#容错，某个服务不可用时，能够切换到其他可用的服务上去，也就是需要有重试机制，在 Zuul中开启重试机制需要依赖spring-retry
#开启重试机制以及配置重试次数
#开启重试
zuul.retryable=true
#请求连接的超时时间（ms）
ribbon.connectTimeout=500
#请求处理的超时时间（ms）
ribbon.readTimeout=5000
#对当前实例的重试次数
ribbon.maxAutoRetries=1
#切换实例的最大重试次数
ribbon.maxAutoRetriesNextServer=3
#对所有操作请求都进行重试
ribbon.okToRetryOnAllOperations=true
#对指定的Http响应码进行重试
ribbon.retryableStatusCodes=500,404,502
#可以启动两个服务，默认Ribbon的转发规则是轮询，然后停掉一个服务。没加重试机制之前，当请求接口的时候肯定有一次是会被转发到停掉的服务上去的，返回的是异常信息
#加入重试机制后，循环请求接口，这个时候不会返回异常信息，因为Ribbon会根据重试配置进行重试，当请求失败后会将请求重新转发到可用的服务上去


#Zuul的路由端点和过滤器信息 当@EnableZuulProxy与Spring Boot Actuator(spring-boot-starter-actuator)配合使用时，
#Zuul会暴露一个路由管理端点 /routes。借助这个端点，可以方便、直观地查看以及管理Zuul的路由 http://localhost:88/actuator/routes
#/fliters 端点会返回 Zuul中所有过滤器的信息。可以清楚地了解Zuul中目前有哪些过滤器，哪些过滤器被禁用了等详细信息 http://localhost:88/actuator/filters
#将所有端点都暴露出来
management.endpoints.web.exposure.include=*

